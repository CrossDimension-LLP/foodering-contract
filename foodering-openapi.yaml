openapi: 3.0.1
info:
  title: Foodering Service - OpenAPI 3.0
  termsOfService: http://swagger.io/terms/
  contact:
    email: info@crossdimension.in
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0.0'
servers:
- url: https://crossdimension.in
- url: http://crossdimension.in

paths:
  /register:
    post:
      tags: 
        - Restaurant Management
      summary: Insertion of Restaurant in Foodering System - A Cross Dimension Unit
      description: Creates New entry of a Restaurant
      operationId: registerRestaurant
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Global tenant id"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantRegistrationData'
        required: true
      responses:
        200:
          description: |
            *OK* - Inserted Restaurant details Will be returned Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantDetails'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: Restaurant Data
  /restaurant/{restaurantId}:
    get:
      tags: 
        - Restaurant Management
      summary: Details of a particular restaurant
      description: Get details of a Restaurant
      operationId: getRestaurantDetails
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
        - in: header
          name: x-tenant-id
          required: true
          description: "Global tenant id"
          schema:
            type: string
      responses:
        200:
          description: |
            *OK* - Restarant details Will be returned Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantDetails'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
  /restaurant/{restaurantId}/update:
    post:
      tags: 
        - Restaurant Management
      summary: Details of a particular restaurant needs to be updated
      description: Get details of a Restaurant
      operationId: updateRestaurantDetails
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
        - in: header
          name: x-tenant-id
          required: true
          description: "Global tenant id"
          schema:
            type: string
      requestBody:
        description: |
          "Service Provider patch element"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchElement'
        required: true
      responses:
        200:
          description: |
            *OK* - Restarant details Will be returned Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantDetails'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
      
  /platter:
    post:
      tags: 
        - Restaurant Management
      summary: Insertion of Platter for a particular restaurant
      description: Creates New entry of a Platter in Restaurant
      operationId: createPlatters
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Platter'
        required: true
      responses:
        200:
          description: |
            *OK* - Inserted platter details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Platter'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: Platter Data
    get:
      tags: 
        - Restaurant Management
      summary: All the Platters for a particular restaurant
      description: Get all the platters in Restaurant
      operationId: getAllPlatters
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
      responses:
        200:
          description: |
            *OK* - Get all platter details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Platter'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
  /cuisines:
    post:
      tags: 
        - Restaurant Management
      summary: Insertion of Cuisines for a particular restaurant
      description: Creates New entry of a Cuisines in Restaurant
      operationId: createCuisines
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Cuisines'
        required: true
      responses:
        200:
          description: |
            *OK* - Inserted cuisines details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cuisines'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: Cuisines Data    
    get:
      tags: 
        - Restaurant Management
      summary: All the Cuisines for a particular restaurant
      description: Get all the Cuisines in Restaurant
      operationId: getAllCuisines
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
        # - in: query
        #   name: cuisineId
        #   description: "Single / Multiple cuisine ids comma [,] separated"
        #   schema:
        #     type: string
      responses:
        200:
          description: |
            *OK* - Get all cuisines details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cuisines'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /items:
    post:
      tags: 
        - Menu Item Management
      summary: Insertion of Menu for a Restaurant
      description: Creates New entry of a Menu item
      operationId: createItems
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Item'
        required: true
      responses:
        200:
          description: |
            *OK* - Inserted Items details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: Item Data
    get:
      tags: 
        - Menu Item Management
      summary: All the items for a particular restaurant
      description: Get all the Menu  Items in Restaurant
      operationId: getAllItems
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
        # - in: query
        #   name: cuisineId
        #   description: "Single / Multiple cuisine ids comma [,] separated"
        #   schema:
        #     type: string
      responses:
        200:
          description: |
            *OK* - Get all menu items details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      tags: 
        - Menu Item Management
      summary: Delete the items for a particular restaurant
      description: Delete the Menu  Items in Restaurant
      operationId: deleteItems
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
        - in: query
          name: itemId
          description: "Single / Multiple item ids comma [,] separated"
          schema:
            type: string
      responses:
        200:
          description: |
            *OK* - Get all menu items details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
  /search:
    get:
      tags: 
        - Menu Item Management
      summary: Search for the items for a particular restaurant
      description: Get all the Menu Items in Restaurant matched the search term
      operationId: searchItems
      parameters:
        - in: header
          name: x-tenant-id
          required: true
          description: "Must be a valid restaurant id"
          schema:
            type: string
        - in: query
          name: searchText
          description: "minimum 4 characters needed"
          schema:
            type: string
      responses:
        200:
          description: |
            *OK* - Get all menu items details Will be returned Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: |
            *Error* - Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            *Error* - Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: |
            *Error* - Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
      
                
components:
  schemas:
    RestaurantRegistrationData:
      required:
      - id
      - name
      - logo
      - restaurantType
      - contact
      - location
      type: object
      properties:
        id:
          type: string
          description: "Id of Particular Restaurant"
        name:
          type: string
          description: "Name of Particular Restaurant"
        logo:
          type: string
          format: binary
          description: "Logo of a particular restaurant"
        contact:
          $ref: '#/components/schemas/ContactInfo'
        location:
          $ref: '#/components/schemas/LocationInfo'
        restaurantType:
          $ref: '#/components/schemas/RestaurantType'
        
    RestaurantDetails:
      required:
      - id
      - name
      - logo
      - restaurantType
      - contact
      - location
      type: object
      properties:
        id:
          type: string
          description: "Id of Particular Restaurant"
        name:
          type: string
          description: "Name of Particular Restaurant"
        logo:
          type: string
          format: binary
          description: "Logo of a particular restaurant"
        contact:
          $ref: '#/components/schemas/ContactInfo'
        location:
          $ref: '#/components/schemas/LocationInfo'
        registrationDate:
          type: string
          description: "Registration Date for the restaurant"
        activationDate:
          type: string
          description: "Date of approval / activation of account"
        status:
          $ref: '#/components/schemas/RestaurantStatus'
        restaurantType:
          $ref: '#/components/schemas/RestaurantType'
        renewalDate:
          type: string
          description: "Date of renewal / re-activation of account"
        lastBilledDate:
          type: string
          description: "Date of last paid subscription date of account"
          
    LocationInfo:
      required:
      - line1
      - zipcode
      - state
      type: object
      properties:
        line1:
          type: string
          description: "Address line1 of Particular Restaurant"
        line2:
          type: string
          description: "line 2 of Particular Restaurant"
        state:
          type: string
          description: "state of Particular Restaurant"
        zipcode:
          type: string
          description: "zipcode of Particular Restaurant"
        country:
          type: string
          description: "country of Particular Restaurant"
          default: "India"
          
    ContactInfo:
      required:
      - phone
      - email
      type: object
      properties:
        phone:
          type: string
          description: "phone / mobile of Particular Restaurant"
        email:
          type: string
          description: "email of Particular Restaurant"
          
    Platter:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: "Id of Particular Platter"
        name:
          type: string
          description: "Name of Particular Platter"
        displayName:
          type: string
          description: "Customer display Name of Particular Platter"
          
    Cuisines:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: "Id of Particular Cuisines"
        name:
          type: string
          description: "Name of Particular Cuisines"
        displayName:
          type: string
          description: "Customer display name of Particular Cuisines"
    Item:
      required:
        - id
        - name
        - price
        - itemType
      type: object
      properties:
        id:
          type: string
          description: "Id of a particular food item"
        name:
          type: string
          description: "Name of the item"
        displayName:
          type: string
          description: "Display name of the item"
        platter:
          $ref: '#/components/schemas/Platter'
        cuisine:
          $ref: '#/components/schemas/Cuisines'
        itemType:
          $ref: '#/components/schemas/ItemType'
        price:
          type: number
          description: "Price of the item"
        taxAllowed:
          type: boolean
          description: "Eligible for tax or not"
        status:
          $ref: '#/components/schemas/ItemStatus'
        
    RestaurantStatus:
      type: string
      enum:
      - REG_INIT
      - REG_APPROVED
      - REG_DECLINED
      - ACC_ACTIVE
      - ACC_DEACTIVE
      - ACC_RENEWAL_PENDING
      - ACC_TERMINATED
      
    RestaurantType:
      type: string
      enum:
      - TAKE_AWAY
      - DINE_IN
      
    ItemType:
      type: string
      enum:
      - VEG
      - NON_VEG
      
    ItemStatus:
      type: string
      enum:
      - AVAILABLE
      - NOT_AVAILABLE
      
    PatchElement:
      type: array
      items:
        type: object
        properties:
          op:
            type: string
            description: |
              Operation To be performed
            example: add, remove, replace
          value:
            type: string
          path:
            type: string
            description: |
              Object Path to be Patched
   
    Error:
      type: object
      properties:
        status:
          type: string
          description: |
            Status of the error code
        message:
          type: string
          description: |
            Error message
        details:
          type: string
          description: |
            Error Details
        path:
          type: string
          description: |
            Error Path
    